{"version":3,"sources":["GraphEditorPageDemo/vfx-codes lazy //.js$","../../src/editor/utils.js","../../src/editor/ENState.js","../../src/editor/firebase.js","../../src/editor/ENMethods.js","../../src/editor/ENHtmls.js","../../src/editor/ENControls.js","../../src/editor/ENCore.js","../../src/editor/ENDisplayCursor.js","../../src/editor/ENLink.js","../../src/editor/ENNode.js","../../src/editor/ENDisplayNodes.js","../../src/editor/EnvRender.js","../../src/editor/GraphEditorContent.js","../../src/cms/GraphEditorPage.js","GraphEditorPageDemo/GraphEditorPageDemo.js","App.js","index.js"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","keys","Object","module","exports","getID","Math","ENState","myObject","___NameSpaceID","Utils","exportJSON","JSON","getNameSpcaeID","onChange","evName","hh","func","window","useReactiveKey","useEffect","makeKeyReactive","useState","vv","setSt","s","onChangeAny","notifyKeyChange","CustomEvent","detail","Proxy","get","set","makeShallowStore","listing","listingReload","layouts","layoutsReload","canvasID","canvasOwnerID","overlay","cursorMode","hovering","draggingNodeID","draggingIOID","addNodeTitle","cursorAt","dragStartPos","moved","isDown","nodes","connections","currentEditSocketID","currentEditNodeID","firebaseConfig","FireCache","firebase","ENMethods","point","newItem","nodeID","title","_id","position","inputs","type","outputs","node","ref","input","output","linkID","nodeIDFire","conn","connIDs","ENHtml","codes","h","style","top","left","width","backgroundColor","className","padding","fontSize","fontFamily","right","zIndex","height","xmlns","fillRule","clipRule","fill","onClick","onPointerDown","cursor","d","MainPanel","nodesTemplates","key","marginLeft","marginBottom","textDecoration","NodePanel","useMemo","fireNodeID","inputLinks","outputLinks","reload","setTitle","borderColor","display","border","appearance","value","target","i","t","localID","idx","socket","remoteNode","ev","_fid","ENControls","camera","useThree","mapControls","useRef","syncCursor","document","eventsHandlers","onPointerUp","setTimeout","onPointerEnter","onPointerMove","passive","screenSpacePanning","visible","name","rotation-x","args","fragmentShader","raycast","position-y","Laptop","props","group","useFrame","state","MathUtils","onPointerLeave","position-x","position-z","metalness","roughness","color","maxWidth","lineHeight","textAlign","anchorX","anchorY","outlineWidth","outlineColor","ENCore","fallback","ENDisplayCursor","gp","getGeo","a","b","dotted","LineSegmentsGeometry","require","LineGeometry","raise","curvePts","lineGeo","colors","pos","temp","colorA","colorB","isNaN","ENDisplayConnectorWire","LineMaterial","Line2","lineMat","transparent","linewidth","opacity","dashed","vertexColors","works","mesh","cursorPos","needsUpdate","w","object","ENLink","link","scene","inputV3","outputV3","sig","inputO3","outputO3","MyIO","io","total","v3","v3b","theta","orbit","eventObject","res","pair","console","scan","userData","ENNode","arr","length","ENDisplayNodes","setNodes","unsusbs","val","snap","data","kn","ENDisplayLinks","links","setLinks","EnvRender","near","frames","resolution","far","GraphEditorContent","intensity","GraphEditorPage","ownerID","ok","setOK","okSize","setOKSize","tt","setInterval","clearInterval","waitGet","FIREBASE","setupFirebase","dpr","resize","Resizer","three","GraphEditorPageDemo","getCodes","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","path","r","forEach","filename","basename","push","loader","importAll","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.03cbd04b.chunk.js","sourcesContent":["var map = {\n\t\"./lok.myFristNode.js\": [\n\t\t67,\n\t\t0,\n\t\t5\n\t],\n\t\"./lok.mySecondNode.js\": [\n\t\t68,\n\t\t0,\n\t\t4,\n\t\t6\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 65;\nmodule.exports = webpackAsyncContext;","import { useEffect, useState } from 'react'\n\nexport const getID = function () {\n  return (\n    '_' +\n    Math.random().toString(36).substr(2, 9) +\n    Math.random().toString(36).substr(2, 9)\n  )\n}\n\nexport const makeShallowStore = (myObject = {}) => {\n  let ___NameSpaceID = getID()\n  let Utils = {\n    exportJSON: () => {\n      return JSON.parse(JSON.stringify(myObject))\n    },\n    getNameSpcaeID: () => {\n      return ___NameSpaceID\n    },\n\n    onChange: (key, func) => {\n      let evName = `${___NameSpaceID}`\n      let hh = () => {\n        func(myObject[key])\n      }\n\n      window.addEventListener(`${evName}-${key}`, hh)\n      return () => {\n        window.removeEventListener(`${evName}-${key}`, hh)\n      }\n    },\n\n    useReactiveKey: (key, func) => {\n      useEffect(() => {\n        let evName = `${___NameSpaceID}`\n        let hh = () => {\n          func(myObject[key])\n        }\n\n        window.addEventListener(`${evName}-${key}`, hh)\n        return () => {\n          window.removeEventListener(`${evName}-${key}`, hh)\n        }\n      }, [])\n    },\n\n    makeKeyReactive: (key) => {\n      let [vv, setSt] = useState(0)\n      useEffect(() => {\n        let evName = `${___NameSpaceID}`\n\n        let hh = () => {\n          setSt((s) => {\n            return s + 1\n          })\n        }\n\n        window.addEventListener(`${evName}-${key}`, hh)\n        return () => {\n          window.removeEventListener(`${evName}-${key}`, hh)\n        }\n      }, [vv])\n    },\n\n    //\n    onChangeAny: (func) => {\n      let evName = `${___NameSpaceID}`\n      let hh = () => {\n        func(myObject[key])\n      }\n\n      window.addEventListener(`${evName}`, hh)\n      return () => {\n        window.removeEventListener(`${evName}`, hh)\n      }\n    },\n\n    notifyKeyChange: (key) => {\n      window.dispatchEvent(\n        new CustomEvent(`${___NameSpaceID}-${key}`, { detail: {} })\n      )\n    }\n  }\n\n  let proxy = new Proxy(myObject, {\n    get: (o, k) => {\n      //\n      if (Utils[k]) {\n        return Utils[k]\n      }\n\n      return o[k]\n    },\n    set: (o, key, val) => {\n      o[key] = val\n\n      if (typeof window !== 'undefined') {\n        window.dispatchEvent(\n          new CustomEvent(`${___NameSpaceID}-${key}`, { detail: {} })\n        )\n      }\n\n      return true\n    }\n  })\n\n  return proxy\n}\n","import { Vector3 } from 'three'\nimport { makeShallowStore } from './utils'\n\nexport const ENState = makeShallowStore({\n  listing: [],\n  listingReload: 0,\n\n  layouts: [],\n  layoutsReload: 0,\n\n  //\n  canvasID: false,\n  canvasOwnerID: false,\n\n  // overlay\n  overlay: '',\n\n  // position\n  cursorMode: 'ready',\n  hovering: 'floor',\n  draggingNodeID: false,\n  draggingIOID: false,\n  addNodeTitle: 'mytitle',\n\n  cursorAt: new Vector3(),\n  dragStartPos: new Vector3(),\n  moved: 0,\n  isDown: false,\n\n  nodes: [],\n  connections: [],\n\n  currentEditSocketID: false,\n  currentEditNodeID: false,\n\n  firebaseConfig: false\n})\n\nexport const waitGet = (key) => {\n  return new Promise((resolve) => {\n    let tt = setInterval(() => {\n      let value = ENState[key]\n      if (value) {\n        clearInterval(tt)\n        resolve(value)\n      }\n    })\n  })\n}\n","import FIREBASE from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/database'\nimport { waitGet } from './ENState'\n\nexport const FireCache = new Map()\nexport function setupFirebase({ firebaseConfig }) {\n  if (!FireCache.has('app')) {\n    FireCache.set('app', FIREBASE.initializeApp(firebaseConfig))\n  }\n\n  if (!FireCache.has('database')) {\n    FireCache.set('database', FIREBASE.database())\n  }\n\n  if (!FireCache.has('setup-listen-login')) {\n    FireCache.set('setup-listen-login', true)\n    FireCache.get('app')\n      .auth()\n      .onAuthStateChanged((user) => {\n        if (user) {\n          // User is signed in, see docs for a list of available properties\n          // https://firebase.google.com/docs/reference/js/firebase.User\n          FireCache.set('user', user)\n          // ...\n        } else {\n          // User is signed out\n          // ...\n          FireCache.delete('user')\n        }\n      })\n  }\n  if (!FireCache.has('setup-do-login')) {\n    FireCache.set('setup-do-login', true)\n\n    // FireCache.get(\"app\")\n    //   .auth()\n    //   .signInAnonymously()\n    //   .then((singin) => {\n    //     // Signed in..\n    //     FireCache.set(\"user\", singin.user);\n    //   })\n    //   .catch((error) => {\n    //     var errorCode = error.code;\n    //     var errorMessage = error.message;\n    //     // ...\n    //     console.log(errorCode, errorMessage);\n\n    //     return Promise.reject(new Error(errorMessage));\n    //   });\n    console.log('[Firebase]: done setup')\n  }\n\n  return FireCache.get('app')\n}\n\nexport const onReady = () => {\n  return new Promise((resolve) => {\n    waitGet('firebaseConfig').then((firebaseConfig) => {\n      setupFirebase({ firebaseConfig })\n\n      let tt = setInterval(() => {\n        if (FireCache.has('user')) {\n          clearInterval(tt)\n          resolve({\n            firebase: FIREBASE,\n            user: FireCache.get('user'),\n            fire: FireCache.get('app'),\n            db: FireCache.get('database'),\n            logout: () => {\n              return FireCache.get('app').auth().signOut()\n            }\n          })\n        }\n      })\n    })\n  })\n}\n\nexport const loginGuest = async () => {\n  return FIREBASE.auth().signInAnonymously()\n}\n\nexport const loginGoogle = () => {\n  var provider = new FIREBASE.auth.GoogleAuthProvider()\n  return FIREBASE.auth().signInWithPopup(provider)\n}\n\nexport const firebase = FIREBASE\n","import { getID } from './utils'\nimport { ENState } from './ENState'\nimport { firebase } from './firebase'\n\nexport class ENMethods {\n  static addCodeBlock({ point }) {\n    ENState.overlay = ''\n    ENState.cursorMode = 'ready'\n    ENState.hovering = 'floor'\n\n    let ref = firebase\n      .database()\n      .ref(`/canvas/${ENState.canvasID}/${ENState.canvasOwnerID}/nodes`)\n\n    let newItem = ref.push()\n\n    let nodeID = getID()\n    newItem.set({\n      title: ENState.addNodeTitle,\n      _id: nodeID,\n      position: point.toArray(),\n      inputs: [\n        //\n        { _id: getID(), type: 'input', nodeID },\n        { _id: getID(), type: 'input', nodeID },\n        { _id: getID(), type: 'input', nodeID },\n        { _id: getID(), type: 'input', nodeID },\n        { _id: getID(), type: 'input', nodeID }\n      ],\n      outputs: [\n        //\n        { _id: getID(), type: 'output', nodeID },\n        { _id: getID(), type: 'output', nodeID },\n        { _id: getID(), type: 'output', nodeID },\n        { _id: getID(), type: 'output', nodeID },\n        { _id: getID(), type: 'output', nodeID }\n      ]\n    })\n  }\n\n  static saveCodeBlock({ node }) {\n    let ref = firebase\n      .database()\n      .ref(\n        `/canvas/${ENState.canvasID}/${ENState.canvasOwnerID}/nodes/${node._fid}`\n      )\n\n    ref.set(node.data)\n  }\n\n  static removeCodeBlockByID({ nodeID }) {\n    let ref = firebase\n      .database()\n      .ref(\n        `/canvas/${ENState.canvasID}/${ENState.canvasOwnerID}/nodes/${nodeID}`\n      )\n\n    ref.remove()\n  }\n\n  static addLink({ input, output }) {\n    let ref = firebase\n      .database()\n      .ref(`/canvas/${ENState.canvasID}/${ENState.canvasOwnerID}/connections`)\n\n    let newItem = ref.push()\n\n    newItem.set({\n      _id: getID(),\n      input,\n      output\n    })\n  }\n\n  static removeLinkByID({ linkID }) {\n    let ref = firebase\n      .database()\n      .ref(\n        `/canvas/${ENState.canvasID}/${ENState.canvasOwnerID}/connections/${linkID}`\n      )\n\n    ref.remove()\n  }\n\n  static removeCurrentNodeAndConnections() {\n    let nodeIDFire = ENState.currentEditNodeID\n\n    let node = ENState.nodes.find((e) => e._fid === nodeIDFire)\n    if (node) {\n      let nodeID = node.data._id\n\n      let connIDs = ENState.connections\n        .filter((conn) => {\n          if (conn.data.input.nodeID === nodeID) {\n            return true\n          }\n          if (conn.data.output.nodeID === nodeID) {\n            return true\n          }\n        })\n        .map((e) => e._fid)\n\n      connIDs.forEach((id) => {\n        ENMethods.removeLinkByID({ linkID: id })\n      })\n\n      ENMethods.removeCodeBlockByID({\n        nodeID: nodeIDFire\n      })\n\n      ENState.currentEditNodeID = false\n    }\n  }\n}\n\n//\n","import React, { useEffect, useMemo, useState } from 'react'\nimport { ENState } from './ENState'\nimport { ENMethods } from './ENMethods'\n\nexport function ENHtml({ codes = [] }) {\n  ENState.makeKeyReactive('overlay')\n\n  useEffect(() => {\n    let h = (e) => {\n      if (e.key.toLowerCase() === 'escape') {\n        ENState.overlay = ''\n      }\n    }\n\n    window.addEventListener('keydown', h)\n    return () => {\n      window.removeEventListener('keydown', h)\n    }\n  })\n\n  return ENState.overlay ? (\n    <div\n      style={{\n        position: 'fixed',\n        top: '0px',\n        left: '0px',\n        width: `100%`,\n        backgroundColor: 'rgba(255,255,255,0.92)'\n      }}\n    >\n      {ENState.overlay === 'main' && <MainPanel codes={codes}></MainPanel>}\n\n      {ENState.overlay === 'node' && <NodePanel codes={codes}></NodePanel>}\n\n      {ENState.overlay === 'addCodeBlock' && (\n        <div\n          style={{\n            width: `100%`,\n            position: 'absolute',\n            top: `0px`,\n            left: `0px`,\n            backgroundColor: 'rgba(255,255,255,0.95)'\n          }}\n        >\n          <div\n            style={{ width: `100%`, backgroundColor: 'rgba(40,255,40,1.0)' }}\n            className='bg-green-400'\n          >\n            <div\n              style={{\n                width: `100%`,\n                padding: '15px',\n                fontSize: '30px',\n                fontFamily: 'Arial'\n              }}\n            >\n              <div\n                style={{\n                  width: `100%`\n                }}\n              >\n                Click on Floor to Add\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {ENState.overlay && (\n        <div\n          style={{\n            position: 'absolute',\n            top: '20px',\n            right: '20px',\n            zIndex: 10\n          }}\n        >\n          <svg\n            width='24'\n            height='24'\n            xmlns='http://www.w3.org/2000/svg'\n            fillRule='evenodd'\n            clipRule='evenodd'\n            fill='black'\n            onClick={() => {\n              ENState.overlay = ''\n            }}\n            onPointerDown={() => {\n              ENState.overlay = ''\n            }}\n            style={{\n              cursor: 'pointer'\n            }}\n          >\n            <path d='M12 11.293l10.293-10.293.707.707-10.293 10.293 10.293 10.293-.707.707-10.293-10.293-10.293 10.293-.707-.707 10.293-10.293-10.293-10.293.707-.707 10.293 10.293z' />\n          </svg>\n        </div>\n      )}\n    </div>\n  ) : (\n    <div></div>\n  )\n}\n\n// title: path.basename(key),\n// loader: () => r(key)\nfunction MainPanel({ codes = [] }) {\n  let nodesTemplates = codes\n  return (\n    <div\n      style={{\n        width: '100%',\n        height: '100%',\n        position: 'fixed',\n        top: '0px',\n        left: '0px',\n        backgroundColor: 'rgba(255,255,255,0.92)'\n      }}\n    >\n      {/*  */}\n      <div\n        style={{\n          backgroundColor: 'rgba(255,255,0,0.92)'\n        }}\n      >\n        <div\n          style={{\n            padding: '15px',\n            fontSize: '30px',\n            fontFamily: 'Arial'\n          }}\n        >\n          <div>Getting Started</div>\n        </div>\n      </div>\n\n      <div\n        style={{\n          padding: '15px',\n          fontSize: '20px',\n          fontFamily: 'Arial'\n        }}\n      >\n        <div>Add New CodeBlock</div>\n      </div>\n\n      {nodesTemplates.map((e) => {\n        return (\n          <div\n            key={e.title}\n            style={{\n              marginLeft: '15px',\n              marginBottom: '15px',\n              textDecoration: 'underline'\n            }}\n          >\n            <div\n              style={{ cursor: 'pointer' }}\n              onPointerDown={() => {\n                ENState.addNodeTitle = e.title\n                ENState.hovering = 'floor'\n                ENState.cursorMode = 'addCodeBlock'\n                ENState.overlay = 'addCodeBlock'\n              }}\n            >\n              {e.title}\n            </div>\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\n// title: path.basename(key),\n// loader: () => r(key)\nfunction NodePanel({ codes = [] }) {\n  let nodesTemplates = codes\n\n  let { node, outputLinks, inputLinks } = useMemo(() => {\n    let fireNodeID = ENState.currentEditNodeID\n    let node = ENState.nodes.find((e) => e._fid === fireNodeID)\n    let inputLinks = []\n    let outputLinks = []\n\n    if (node) {\n      let nodeID = node.data._id\n\n      inputLinks = ENState.connections.filter((conn) => {\n        if (conn.data.input.nodeID === nodeID) {\n          return true\n        }\n      })\n\n      outputLinks = ENState.connections.filter((conn) => {\n        if (conn.data.output.nodeID === nodeID) {\n          return true\n        }\n      })\n    }\n\n    return {\n      node,\n      inputLinks,\n      outputLinks\n    }\n  })\n\n  let [, reload] = useState(0)\n  let [title, setTitle] = useState(node.data.title)\n\n  return (\n    <div\n      style={{\n        width: '100%',\n        height: '100%',\n        position: 'fixed',\n        top: '0px',\n        left: '0px',\n        backgroundColor: 'rgba(255,255,255,0.92)'\n      }}\n    >\n      <div\n        style={{\n          backgroundColor: 'lightblue'\n        }}\n      >\n        <div\n          style={{\n            padding: '15px',\n            fontSize: '30px',\n            fontFamily: 'Arial'\n          }}\n        >\n          <div>Node Settings</div>\n        </div>\n      </div>\n\n      <div\n        style={{\n          padding: '15px',\n          fontSize: '20px',\n          fontFamily: 'Arial'\n        }}\n      >\n        <div>\n          Node using logic:{' '}\n          <div\n            style={{\n              borderColor: 'black',\n              display: 'inline-block',\n              border: 'black solid 1px'\n            }}\n          >\n            <select\n              style={{ appearance: 'none', width: '100%', height: '100%' }}\n              value={title}\n              onChange={({ target: { value } }) => {\n                node.data.title = value\n                ENMethods.saveCodeBlock({ node })\n                setTitle(value)\n              }}\n            >\n              {nodesTemplates.map((t, i) => {\n                return (\n                  <option key={i + t.title} value={t.title}>\n                    {t.title}\n                  </option>\n                )\n              })}\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {inputLinks.length > 0 && (\n        <div\n          style={{\n            padding: '15px',\n            fontSize: '23px',\n            fontFamily: 'Arial'\n          }}\n        >\n          <div style={{ cursor: 'pointer' }}>Inputs</div>\n        </div>\n      )}\n\n      {inputLinks.map((e) => {\n        let localID = e.data.input._id\n        let idx = node.data.inputs.findIndex((e) => e._id === localID)\n\n        let socket = node.data.inputs.find((e) => e._id === localID)\n        let remoteNode = ENState.nodes.find((e) => e.data._id === socket.nodeID)\n        return (\n          <div\n            key={e._fid}\n            style={{\n              marginLeft: '15px',\n              marginBottom: '15px',\n              textDecoration: 'underline'\n            }}\n          >\n            <div\n              style={{ cursor: 'pointer' }}\n              onPointerDown={(ev) => {\n                if (ev.currentTarget.style.color === 'red') {\n                  //\n                  ENMethods.removeLinkByID({ linkID: e._fid })\n                  reload((s) => s + 1)\n                }\n                ev.currentTarget.style.color = 'red'\n              }}\n            >\n              {/*  */}\n              Remove Input at label \"{idx}\"{' '}\n              {remoteNode.data.title && (\n                <span>which is conncted to \"{remoteNode.data.title}\"</span>\n              )}\n            </div>\n          </div>\n        )\n      })}\n\n      {outputLinks.length > 0 && (\n        <div\n          style={{\n            padding: '15px',\n            fontSize: '23px',\n            fontFamily: 'Arial'\n          }}\n        >\n          <div style={{ cursor: 'pointer' }}>Outputs</div>\n        </div>\n      )}\n\n      {outputLinks.map((e) => {\n        let localID = e.data.output._id\n        let idx = node.data.outputs.findIndex((e) => e._id === localID)\n\n        let socket = node.data.outputs.find((e) => e._id === localID)\n        let remoteNode = ENState.nodes.find((e) => e.data._id === socket.nodeID)\n\n        return (\n          <div\n            key={e._fid}\n            style={{\n              marginLeft: '15px',\n              marginBottom: '15px',\n              textDecoration: 'underline'\n            }}\n          >\n            <div\n              style={{ cursor: 'pointer' }}\n              onPointerDown={(ev) => {\n                if (ev.currentTarget.style.color === 'red') {\n                  ENMethods.removeLinkByID({ linkID: e._fid })\n                  reload((s) => s + 1)\n                }\n                ev.currentTarget.style.color = 'red'\n              }}\n            >\n              {/*  */}\n              Remove Output at label \"{idx}\"{' '}\n              {remoteNode.data.title && (\n                <span>which is conncted to \"{remoteNode.data.title}\"</span>\n              )}\n            </div>\n          </div>\n        )\n      })}\n\n      <div\n        style={{\n          padding: '15px',\n          fontSize: '23px',\n          fontFamily: 'Arial'\n        }}\n      >\n        <div style={{ cursor: 'pointer' }}>Remove Node & Connections</div>\n      </div>\n\n      <div\n        style={{\n          padding: '15px',\n          textDecoration: 'underline',\n          fontFamily: 'Arial'\n        }}\n      >\n        <div\n          style={{ cursor: 'pointer' }}\n          onPointerDown={() => {\n            if (window.confirm(`remove item`)) {\n              ENMethods.removeCurrentNodeAndConnections()\n              ENState.overlay = ''\n            }\n          }}\n        >\n          Remove\n        </div>\n      </div>\n    </div>\n  )\n}\n\n//\n","// import { useFrame } from \"@react-three/fiber\";\nimport { MapControls } from '@react-three/drei'\nimport { useThree } from '@react-three/fiber'\nimport React, { useEffect, useRef } from 'react'\nimport { ENMethods } from './ENMethods'\nimport { ENState } from './ENState'\n//\n\nexport function ENControls() {\n  let { camera } = useThree()\n\n  let mapControls = useRef()\n\n  useEffect(() => {\n    camera.position.X = 0\n    camera.position.y = 50\n    camera.position.z = 75\n    camera.fov = 45\n    camera.lookAt(0, 0, 0)\n    camera.near = 0.1\n    camera.far = 10000.0\n\n    camera.updateProjectionMatrix()\n  }, [mapControls.current])\n\n  //\n  // ----- ----- ----- ----- -----\n  //\n\n  // ENState.useReactiveKey(\"movementXY\", () => {\n  //   // console.log(ENState.movementXY);\n  // });\n\n  // useFrame(({ raycaster, mouse, camera }) => {\n  //   raycaster.setFromCamera(mouse, camera);\n  // });\n\n  // let { raycaster, scene } = useThree();\n  // let getFloorPt = () => {\n  //   let floor = scene.getObjectByName(\"floor\");\n  //   let found = raycaster.intersectObject(floor);\n  //   let first = found[0];\n  //   if (first) {\n  //     return first.point;\n  //   }\n  // };\n\n  //\n  //\n  //\n\n  let syncCursor = () => {\n    if (ENState.hovering === 'floor') {\n      if (ENState.cursorMode === 'ready') {\n        document.body.style.cursor = 'grab'\n      } else if (ENState.cursorMode === 'pan') {\n        document.body.style.cursor = 'grabbing'\n      } else if (ENState.cursorMode === 'addCodeBlock') {\n        document.body.style.cursor = 'crosshair'\n      }\n    } else if (ENState.hovering === 'object') {\n      document.body.style.cursor = 'pointer'\n    } else if (ENState.hovering === 'overlay') {\n      document.body.style.cursor = ''\n    } else {\n      document.body.style.cursor = ''\n    }\n  }\n\n  ENState.useReactiveKey('overlay', syncCursor)\n  ENState.useReactiveKey('cursorMode', syncCursor)\n  ENState.useReactiveKey('hovering', syncCursor)\n  ENState.useReactiveKey('draggingNodeID', () => {\n    mapControls.current.enabled = !ENState.draggingNodeID\n  })\n  ENState.useReactiveKey('draggingIOID', () => {\n    mapControls.current.enabled = !ENState.draggingIOID\n  })\n\n  let eventsHandlers = {\n    //\n    onPointerDown: ({ point }) => {\n      ENState.isDown = true\n      if (ENState.cursorMode === 'ready') {\n        ENState.cursorMode = 'pan'\n      }\n      if (ENState.cursorMode === 'addCodeBlock') {\n        ENMethods.addCodeBlock({ point })\n      }\n    },\n\n    //\n    onPointerUp: ({ point }) => {\n      ENState.isDown = false\n      if (ENState.cursorMode === 'pan') {\n        ENState.cursorMode = 'ready'\n      }\n\n      setTimeout(() => {\n        if (ENState.draggingIOID) {\n          ENState.draggingIOID = false\n        }\n      }, 100)\n    },\n\n    onPointerEnter: () => {},\n\n    //\n    onPointerMove: (ev) => {\n      ENState.moved++\n      ev.stopPropagation()\n      if (ENState.hovering !== 'floor') {\n        ENState.hovering = 'floor'\n      }\n      ENState.cursorAt.copy(ev.point)\n\n      //\n      //\n      //\n      // console.log(ev);\n      // ENState.movementXY = {\n      //   x: ev.movementX,\n      //   y: ev.movementY,\n      // };\n      //\n      // console.log(ev.movementX, ev.movementY);\n      // ENState.isDown = false;\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener(\n      'touchstart',\n      (ev) => {\n        ev.preventDefault()\n      },\n      { passive: false }\n    )\n\n    window.addEventListener(\n      'touchmove',\n      (ev) => {\n        ev.preventDefault()\n      },\n      { passive: false }\n    )\n  }, [])\n\n  return (\n    <group>\n      <MapControls\n        //\n        screenSpacePanning={false}\n        // dampingFactor={0.1}\n\n        ref={mapControls}\n      ></MapControls>\n      <mesh\n        visible={false}\n        name='floor'\n        rotation-x={Math.PI * -0.5}\n        {...eventsHandlers}\n      >\n        <planeBufferGeometry args={[1000, 1000, 2, 2]}></planeBufferGeometry>\n\n        <shaderMaterial\n          fragmentShader={/* glsl */ `void main (void) { discard; }`}\n        ></shaderMaterial>\n      </mesh>\n      <gridHelper\n        raycast={() => {}}\n        position-y={0.01}\n        args={[1000, 100, '#232323', '#232323']}\n      ></gridHelper>\n    </group>\n  )\n}\n","/* eslint-disable dot-notation */\nimport { meshBounds, Text } from '@react-three/drei'\nimport { useFrame } from '@react-three/fiber'\nimport React, { Suspense, useRef } from 'react'\n// import { Color } from \"three\";\nimport { MathUtils } from 'three'\nimport { ENState } from './ENState'\n\nexport function Laptop({ ...props }) {\n  const group = useRef()\n\n  // Make it float\n  useFrame((state) => {\n    const t = state.clock.getElapsedTime()\n\n    group.current.rotation.z = MathUtils.lerp(\n      group.current.rotation.z,\n      Math.sin(t / 4) / 20,\n      0.1\n    )\n\n    group.current.position.y = MathUtils.lerp(\n      group.current.position.y,\n      (-5 + Math.sin(t)) / 5,\n      0.1\n    )\n  })\n\n  return (\n    <group\n      raycast={meshBounds}\n      onPointerEnter={() => {\n        //\n        ENState.hovering = 'object'\n      }}\n      onPointerLeave={() => {\n        //\n        ENState.hovering = 'floor'\n      }}\n      //\n      onPointerDown={(e) => {\n        e.stopPropagation()\n        e.target.setPointerCapture(e.pointerId)\n      }}\n      onPointerUp={(e) => {\n        ENState.overlay = 'main'\n        ENState.hovering = 'overlay'\n\n        e.stopPropagation()\n        e.target.releasePointerCapture(e.pointerId)\n      }}\n      ref={group}\n      {...props}\n    >\n      <pointLight position-x={0} position-z={-2} position-y={2}></pointLight>\n      <group rotation-x={Math.PI * 0.0} position={[0, -0.04, 0.41]}>\n        <mesh onClick={() => {}}>\n          <sphereBufferGeometry args={[4, 32, 32]}></sphereBufferGeometry>\n          <meshStandardMaterial\n            metalness={1}\n            roughness={0.3}\n            color='#bababa'\n          ></meshStandardMaterial>\n        </mesh>\n      </group>\n\n      <group position={[0, 7, 1]} rotation-x={Math.PI * -0.25}>\n        <Text\n          color={'#000000'}\n          fontSize={1.5}\n          maxWidth={200}\n          lineHeight={1}\n          textAlign={'center'}\n          anchorX='center'\n          anchorY='middle'\n          outlineWidth={0.12}\n          outlineColor='#ffffff'\n        >{`Click to start`}</Text>\n\n        {/* <Text\n          color={'#000000'}\n          fontSize={1.3}\n          maxWidth={200}\n          lineHeight={1}\n          textAlign={'center'}\n          anchorX='center'\n          anchorY='middle'\n          outlineWidth={0.04}\n          outlineColor='#ffffff'\n        >{`Click to start`}</Text> */}\n      </group>\n    </group>\n  )\n}\n\nexport function ENCore() {\n  //\n  //\n\n  return (\n    <group>\n      <Suspense fallback={null}>\n        <group position-y={3}>\n          <Laptop></Laptop>\n        </group>\n      </Suspense>\n    </group>\n  )\n}\n","import { Text } from '@react-three/drei'\nimport { useFrame } from '@react-three/fiber'\nimport React, { useMemo, useRef } from 'react'\nimport { CatmullRomCurve3, Color, Vector3 } from 'three'\nimport { ENState } from './ENState'\n\nexport function ENDisplayCursor() {\n  ENState.makeKeyReactive('cursorMode')\n\n  let gp = useRef()\n\n  useFrame(() => {\n    if (gp.current) {\n      gp.current.position.lerp(ENState.cursorAt, 0.5)\n    }\n  })\n  return (\n    <group visible={!('ontouchstart' in window)} ref={gp}>\n      {ENState.cursorMode === 'addCodeBlock' && (\n        <group>\n          <mesh position-y={1} rotation-x={Math.PI * 1}>\n            <coneBufferGeometry args={[0.8, 2, 32, 1]}></coneBufferGeometry>\n            <meshStandardMaterial\n              color={'#bababa'}\n              roughness={0.3}\n              metalness={1}\n            ></meshStandardMaterial>\n          </mesh>\n\n          <group rotation-x={Math.PI * -0.25} position-y={3}>\n            <Text\n              color={'#000000'}\n              fontSize={0.7}\n              maxWidth={200}\n              lineHeight={1}\n              textAlign={'center'}\n              anchorX='center'\n              anchorY='middle'\n              outlineWidth={0.04}\n              outlineColor='#ffffff'\n            >{`Click to add`}</Text>\n          </group>\n        </group>\n      )}\n    </group>\n  )\n}\n\nexport const getGeo = ({ a, b, dotted = false }) => {\n  const {\n    LineSegmentsGeometry\n  } = require('three/examples/jsm/lines/LineSegmentsGeometry')\n  const { LineGeometry } = require('three/examples/jsm/lines/LineGeometry')\n\n  const dist = new Vector3().copy(a).distanceTo(b)\n  let raise = dist / 1.6\n  if (raise > 500) {\n    raise = 500\n  }\n  const curvePts = new CatmullRomCurve3(\n    [\n      new Vector3(a.x, a.y - 1, a.z),\n      new Vector3(a.x, a.y - 1 + raise, a.z),\n      new Vector3(b.x, b.y - 1 + raise, b.z),\n      new Vector3(b.x, b.y - 1, b.z)\n    ],\n    false\n  )\n\n  let lineGeo = new LineGeometry()\n  if (dotted) {\n    lineGeo = new LineSegmentsGeometry()\n  }\n  let colors = []\n  let pos = []\n  let count = 100\n  let temp = new Vector3()\n\n  let colorA = new Color()\n  let colorB = new Color('#0000ff')\n\n  for (let i = 0; i < count; i++) {\n    curvePts.getPointAt((i / count) % 1, temp)\n    if (isNaN(temp.x)) {\n      temp.x = 0.0\n    }\n    if (isNaN(temp.y)) {\n      temp.y = 0.0\n    }\n    if (isNaN(temp.z)) {\n      temp.z = 0.0\n    }\n    pos.push(temp.x, temp.y, temp.z)\n    colorA.setStyle('#00ff00')\n    colorA.lerp(colorB, i / count)\n\n    //\n    colorA.offsetHSL(0, 0.5, 0.0)\n    colors.push(colorA.r, colorA.g, colorA.b)\n  }\n\n  lineGeo.setColors(colors)\n\n  lineGeo.setPositions(pos)\n  return lineGeo\n}\n\nexport function ENDisplayConnectorWire() {\n  ENState.makeKeyReactive('draggingIOID')\n\n  const { LineMaterial } = require('three/examples/jsm/lines/LineMaterial')\n  // const { LineGeometry } = require(\"three/examples/jsm/lines/LineGeometry\");\n  const { Line2 } = require('three/examples/jsm/lines/Line2')\n  const lineMat = useMemo(() => {\n    const material = new LineMaterial({\n      transparent: true,\n      color: new Color('#00ffff'),\n      linewidth: 0.0015,\n      opacity: 1.0,\n      dashed: true,\n      vertexColors: false\n    })\n\n    return material\n  }, [])\n\n  let works = useRef({})\n\n  let mesh = useMemo(() => {\n    let cursorPos = new Vector3().copy(ENState.cursorAt)\n    cursorPos.set(1, 1, 1)\n\n    let dragStartPos = new Vector3(1, 1, 1).copy(ENState.dragStartPos)\n\n    let lineGeo = getGeo({ a: cursorPos, b: dragStartPos, dotted: true })\n\n    const mesh = new Line2(lineGeo, lineMat)\n    mesh.computeLineDistances()\n\n    let needsUpdate = false\n    works.current.updateLine = () => {\n      if (\n        ENState.isDown &&\n        !(\n          cursorPos.x === ENState.cursorAt.x &&\n          cursorPos.y === ENState.cursorAt.y &&\n          cursorPos.z === ENState.cursorAt.z\n        )\n      ) {\n        needsUpdate = true\n      }\n      cursorPos.copy(ENState.cursorAt)\n\n      if (needsUpdate) {\n        //\n        let lineGeo = getGeo({ a: cursorPos, b: dragStartPos, dotted: true })\n        mesh.geometry = lineGeo\n      }\n    }\n\n    return mesh\n  })\n\n  useFrame(() => {\n    Object.values(works.current).forEach((w) => w())\n  })\n\n  return (\n    <group>\n      {ENState.draggingIOID && <primitive object={mesh}></primitive>}\n    </group>\n  )\n}\n","import { useFrame, useThree } from '@react-three/fiber'\nimport React, { useEffect, useMemo, useRef } from 'react'\nimport { Color, Vector3 } from 'three'\nimport { getGeo } from './ENDisplayCursor'\n\nexport function ENLink({ link }) {\n  // getGeo()\n\n  const { LineMaterial } = require('three/examples/jsm/lines/LineMaterial')\n  // const { LineGeometry } = require(\"three/examples/jsm/lines/LineGeometry\");\n  const { Line2 } = require('three/examples/jsm/lines/Line2')\n  const lineMat = useMemo(() => {\n    const material = new LineMaterial({\n      transparent: true,\n      color: new Color('#00ffff'),\n      linewidth: 0.0015,\n      opacity: 0.8,\n      dashed: true,\n      vertexColors: true\n    })\n\n    return material\n  }, [])\n  let works = useRef({})\n\n  let { scene } = useThree()\n\n  let mesh = useMemo(() => {\n    let inputV3 = new Vector3()\n    let outputV3 = new Vector3()\n\n    let lineGeo = getGeo({ a: inputV3, b: outputV3 })\n\n    const mesh = new Line2(lineGeo, lineMat)\n    mesh.computeLineDistances()\n\n    return mesh\n  }, [])\n\n  useEffect(() => {\n    let inputV3 = new Vector3()\n    let outputV3 = new Vector3()\n\n    let sig = 0\n    works.current.updateLine = () => {\n      // docs _id\n      let inputO3 = scene.getObjectByName(link.data.input._id)\n      let outputO3 = scene.getObjectByName(link.data.output._id)\n\n      if (inputO3 && outputO3) {\n        inputO3.getWorldPosition(inputV3)\n        outputO3.getWorldPosition(outputV3)\n\n        if (sig !== inputV3.length() + outputV3.length()) {\n          sig = inputV3.length() + outputV3.length()\n          let lineGeo = getGeo({ a: inputV3, b: outputV3 })\n          mesh.geometry = lineGeo\n        }\n      }\n    }\n\n    //\n  }, [])\n\n  useFrame(() => {\n    Object.values(works.current).forEach((w) => w())\n  })\n\n  return (\n    <group>\n      <primitive object={mesh}></primitive>\n    </group>\n  )\n}\n","import { meshBounds, Text } from '@react-three/drei'\nimport { useFrame } from '@react-three/fiber'\nimport React, { useRef } from 'react'\nimport { Color, Vector3 } from 'three'\nimport { ENMethods } from './ENMethods'\nimport { ENState } from './ENState'\n\nlet MyIO = ({ idx, io = 'input', node, socket, e, total }) => {\n  let v3 = new Vector3()\n  let v3b = new Vector3()\n\n  let orbit = 6\n  let radius = 1\n\n  let theta = e * -Math.PI\n\n  if (io === 'output') {\n    theta = Math.PI * e\n  }\n\n  theta -= (0.5 * (Math.PI * 2)) / total\n  theta += Math.PI * 1.5\n\n  v3.setFromCylindricalCoords(orbit, theta, 0)\n  v3b.setFromCylindricalCoords(orbit + 4.5, theta, 0)\n\n  let scan = () => {\n    if (\n      ENState.draggingIOID &&\n      ENState.draggingIOID.socket._id !== socket._id &&\n      ENState.draggingIOID.node._fid !== node._fid &&\n      ENState.draggingIOID.socket.type !== socket.type\n    ) {\n      //\n      let pair = [{ node, socket }, { ...ENState.draggingIOID }]\n      let input = pair.find((e) => e.socket.type === 'input')\n      let output = pair.find((e) => e.socket.type === 'output')\n\n      console.log(input, output)\n      // console.log(input, output);\n      if (input && output) {\n        return { input, output }\n      }\n    }\n  }\n\n  return (\n    //\n    <group>\n      <mesh\n        position-y={0}\n        name={socket._id}\n        onPointerDown={(e) => {\n          e.stopPropagation()\n          e.target.setPointerCapture(e.pointerId)\n\n          ENState.isDown = true\n          ENState.draggingIOID = {\n            socket: JSON.parse(JSON.stringify(socket)),\n            node: JSON.parse(JSON.stringify(node))\n          }\n          ENState.dragStartPos.copy(ENState.cursorAt)\n        }}\n        //\n        onPointerMove={({ eventObject }) => {\n          eventObject.material.emissive = new Color('#323232')\n          eventObject.material.needsUpdate = true\n        }}\n        onPointerEnter={({ eventObject }) => {\n          eventObject.material.emissive = new Color('#323232')\n          eventObject.material.needsUpdate = true\n        }}\n        onPointerLeave={({ eventObject }) => {\n          eventObject.material.emissive = new Color('#000000')\n          eventObject.material.needsUpdate = true\n        }}\n        //\n        onPointerUp={(e) => {\n          e.stopPropagation()\n          e.target.releasePointerCapture(e.pointerId)\n          // ENMethods.saveCodeBlock({ node });\n\n          let res = scan()\n\n          if (res) {\n            ENMethods.addLink({\n              input: res.input.socket,\n              output: res.output.socket\n            })\n          }\n\n          ENState.isDown = false\n          ENState.draggingIOID = false\n        }}\n        //\n        position={v3.toArray()}\n        userData={socket}\n      >\n        {/* <boxBufferGeometry\n        args={[radius * 1.5, radius * 1.5, radius * 1.5]}\n      ></boxBufferGeometry> */}\n        <sphereBufferGeometry args={[radius, 20, 20]}></sphereBufferGeometry>\n        <meshStandardMaterial\n          metalness={1}\n          roughness={0.3}\n          color={io === 'input' ? 'green' : 'blue'}\n        ></meshStandardMaterial>\n      </mesh>\n\n      <group position={v3b.toArray()}>\n        <group\n          position-z={io === 'input' ? -0.1 : 0.1}\n          rotation-x={Math.PI * -0.25}\n        >\n          <Text\n            color={'#000000'}\n            fontSize={1.5}\n            maxWidth={200}\n            lineHeight={1}\n            textAlign={'center'}\n            anchorX='center'\n            anchorY='middle'\n            outlineWidth={0.12}\n            outlineColor='#ffffff'\n          >{`${idx}`}</Text>\n        </group>\n      </group>\n    </group>\n  )\n}\n\nexport function ENNode({ node }) {\n  let radius = 2.75\n  let gp = useRef()\n\n  useFrame(() => {\n    if (gp.current) {\n      if (ENState.draggingNodeID === node.data._id) {\n        node.data.position = ENState.cursorAt.toArray()\n      }\n      gp.current.position.fromArray(node.data.position)\n    }\n  })\n\n  return (\n    <group position-y={radius}>\n      <group ref={gp}>\n        <group position-z={18} position-y={0} rotation-x={Math.PI * -0.25}>\n          <Text\n            color={'#000000'}\n            fontSize={1.5}\n            maxWidth={200}\n            lineHeight={1}\n            textAlign={'center'}\n            anchorX='center'\n            anchorY='middle'\n            outlineWidth={0.12}\n            outlineColor='#ffffff'\n          >{`${node.data.title}`}</Text>\n        </group>\n\n        <group>\n          <mesh\n            raycast={meshBounds}\n            onPointerDown={(e) => {\n              ENState.isDown = true\n              ENState.draggingNodeID = node.data._id\n              ENState.moved = 0\n            }}\n            onPointerUp={(e) => {\n              ENState.isDown = false\n              ENState.draggingNodeID = false\n              ENMethods.saveCodeBlock({ node })\n\n              if (ENState.moved <= 10) {\n                ENState.currentEditNodeID = node._fid\n                ENState.overlay = 'node'\n              }\n              ENState.moved = 0\n            }}\n          >\n            <sphereBufferGeometry\n              args={[radius, 32, 32]}\n            ></sphereBufferGeometry>\n            <meshStandardMaterial\n              metalness={1}\n              roughness={0.3}\n            ></meshStandardMaterial>\n          </mesh>\n        </group>\n\n        <group position-z={-1.11}>\n          {node.data.inputs.map((e, idx, arr) => {\n            //\n            //\n\n            return (\n              <MyIO\n                key={e._id}\n                socket={e}\n                node={node}\n                idx={idx}\n                e={(idx + 0) / arr.length}\n                total={node.data.inputs.length + node.data.outputs.length}\n              ></MyIO>\n            )\n          })}\n        </group>\n\n        <group position-z={1.11}>\n          {node.data.outputs.map((e, idx, arr) => {\n            //\n            //\n\n            return (\n              <MyIO\n                io={'output'}\n                key={e._id}\n                socket={e}\n                node={node}\n                idx={idx}\n                e={(idx + 1) / arr.length}\n                total={node.data.inputs.length + node.data.outputs.length}\n              ></MyIO>\n            )\n          })}\n        </group>\n      </group>\n    </group>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport { ENLink } from './ENLink'\nimport { ENNode } from './ENNode'\nimport { ENState } from './ENState'\nimport { firebase } from './firebase'\n\nexport function ENDisplayNodes() {\n  let [nodes, setNodes] = useState([])\n\n  ENState.makeKeyReactive('canvasOwnerID')\n  ENState.makeKeyReactive('canvasID')\n\n  let canvasID = ENState.canvasID\n  let canvasOwnerID = ENState.canvasOwnerID\n  useEffect(() => {\n    if (!canvasID) {\n      return () => {}\n    }\n\n    if (!canvasOwnerID) {\n      return () => {}\n    }\n\n    //\n    let unsusbs = firebase\n      .database()\n      .ref(`/canvas/${canvasID}/${canvasOwnerID}/nodes`)\n      .on('value', (snap) => {\n        if (snap) {\n          let arr = []\n\n          let val = snap.val()\n          for (let kn in val) {\n            arr.push({\n              _fid: kn,\n              data: val[kn]\n            })\n          }\n          ENState.nodes = arr\n\n          setNodes(arr)\n        }\n      })\n    return () => {\n      unsusbs()\n    }\n  }, [canvasID, canvasOwnerID])\n\n  return (\n    <group>\n      {nodes.map((node) => {\n        return <ENNode key={node._fid} node={node}></ENNode>\n      })}\n    </group>\n  )\n}\n\nexport function ENDisplayLinks() {\n  let [links, setLinks] = useState([])\n\n  ENState.makeKeyReactive('canvasOwnerID')\n  ENState.makeKeyReactive('canvasID')\n\n  let canvasID = ENState.canvasID\n  let canvasOwnerID = ENState.canvasOwnerID\n  useEffect(() => {\n    if (!canvasID) {\n      return () => {}\n    }\n    if (!canvasOwnerID) {\n      return () => {}\n    }\n\n    //\n    return firebase\n      .database()\n      .ref(`/canvas/${canvasID}/${canvasOwnerID}/connections`)\n      .on('value', (snap) => {\n        if (snap) {\n          let arr = []\n\n          let val = snap.val()\n\n          for (let kn in val) {\n            arr.push({\n              _fid: kn,\n              data: val[kn]\n            })\n          }\n\n          ENState.connections = arr\n\n          setLinks(arr)\n          console.log(arr)\n        }\n      })\n  }, [canvasID, canvasOwnerID])\n\n  return (\n    <group>\n      {links.map((link) => {\n        return <ENLink key={link._fid} link={link}></ENLink>\n      })}\n    </group>\n  )\n}\n","import { CubeCamera } from '@react-three/drei'\nimport { useThree } from '@react-three/fiber'\nimport React from 'react'\nimport { Color } from 'three'\n\nexport function EnvRender() {\n  let { get } = useThree()\n  // const cubeRenderTarget = new WebGLCubeRenderTarget(256, {\n  //   encoding: sRGBEncoding, // since gamma is applied during rendering, the cubeCamera renderTarget texture encoding must be sRGBEncoding\n  //   format: RGBAFormat\n  // })\n\n  // let cubeCamera = new CubeCamera(0.1, 1000, cubeRenderTarget)\n\n  // useEffect(() => {\n  //   //\n  //   let { gl, scene } = get()\n  //   cubeCamera.update(gl, scene)\n\n  //   scene.add(cubeCamera)\n  //   //\n\n  //   scene.background = cubeRenderTarget.texture\n  //   scene.environment = cubeRenderTarget.texture\n  // }, [])\n\n  return (\n    <CubeCamera near={0.1} frames={1} resolution={128} far={1000}>\n      {(texture) => {\n        get().scene.background = new Color('#444')\n        get().scene.environment = texture\n      }}\n    </CubeCamera>\n  )\n}\n","import React from 'react'\n\n//\nimport { ENControls } from './ENControls'\n\n//\nimport { ENCore } from './ENCore'\n// import { ENHDRI as ENHdri } from './ENHDRI'\nimport { ENDisplayConnectorWire, ENDisplayCursor } from './ENDisplayCursor'\nimport { ENDisplayLinks, ENDisplayNodes } from './ENDisplayNodes'\nimport { EnvRender } from './EnvRender'\n\n// ENState\nexport function GraphEditorContent() {\n  return (\n    <group>\n      {/*  */}\n      <ENControls></ENControls>\n\n      {/* <ENHdri></ENHdri> */}\n\n      <ENCore></ENCore>\n\n      <ENDisplayNodes></ENDisplayNodes>\n      <ENDisplayLinks></ENDisplayLinks>\n\n      <ENDisplayCursor></ENDisplayCursor>\n\n      <ENDisplayConnectorWire></ENDisplayConnectorWire>\n\n      <EnvRender></EnvRender>\n\n      <ambientLight intensity={0.87}></ambientLight>\n      <directionalLight\n        position={[10, 10, 0]}\n        intensity={0.87}\n      ></directionalLight>\n      <ambientLight position={[10, 10, -10]} intensity={0.87}></ambientLight>\n    </group>\n  )\n}\n","import React, { useEffect, useRef, useState } from 'react'\nimport { Canvas, useThree } from '@react-three/fiber'\nimport { ENState, waitGet } from '../editor/ENState'\nimport { ENHtml } from '../editor/ENHtmls'\nimport { GraphEditorContent } from '../editor/GraphEditorContent'\nimport { setupFirebase } from '../editor/firebase'\n\nexport const GraphEditorPage = ({\n  canvasID,\n  ownerID,\n  codes = [],\n  firebaseConfig\n}) => {\n  let [ok, setOK] = useState(false)\n  let [okSize, setOKSize] = useState(false)\n  useEffect(() => {\n    ENState.canvasID = canvasID\n    ENState.canvasOwnerID = ownerID\n    ENState.firebaseConfig = firebaseConfig\n\n    waitGet('firebaseConfig').then((firebaseConfig) => {\n      setupFirebase({ firebaseConfig })\n      setOK(true)\n    })\n  }, [canvasID, ownerID])\n\n  let ref = useRef()\n  return (\n    <div\n      ref={ref}\n      style={{ width: `100%`, height: `100%`, position: 'relative' }}\n    >\n      <Canvas\n        dpr={(typeof window !== 'undefined' && window.devicePixelRatio) || 1.0}\n      >\n        {ok && okSize && <GraphEditorContent></GraphEditorContent>}\n        <Resizer setOKSize={setOKSize} resize={ref}></Resizer>\n      </Canvas>\n\n      {ok && okSize && <ENHtml codes={codes}></ENHtml>}\n    </div>\n  )\n}\n\nfunction Resizer({ resize, setOKSize }) {\n  let three = useThree()\n\n  useEffect(() => {\n    if (resize.current) {\n      resize.current.style.width = `${window.innerWidth}px`\n      resize.current.style.height = `${window.innerWidth}px`\n    }\n    setTimeout(() => {\n      setOKSize(true)\n    })\n  }, [three, resize, resize.current])\n\n  return null\n}\n","import React from 'react'\n\nimport { GraphEditorPage } from 'effectnode-cms'\n\nexport const GraphEditorPageDemo = () => {\n  return (\n    <GraphEditorPage\n      firebaseConfig={firebaseConfig}\n      canvasID={`-MdBQtfGPXXPkl-NuEoW`}\n      ownerID={`NGpUixuU0NOkOlmLsLuepkaZxxt1`}\n      codes={getCodes()}\n    />\n  )\n}\n\nexport const firebaseConfig = {\n  apiKey: 'AIzaSyAPuwK2yMl025KLVTnGDdN34XxHBYQHoVk',\n  authDomain: 'effect-node-by-you.firebaseapp.com',\n  databaseURL: 'https://en-you.firebaseio.com/',\n  projectId: 'effect-node-by-you',\n  storageBucket: 'effect-node-by-you.appspot.com',\n  messagingSenderId: '587774316246',\n  appId: '1:587774316246:web:2a52c46bd184fc3a1d4377',\n  measurementId: 'G-SYFGKL6VNR'\n}\n\nexport const getCodes = () => {\n  let path = require('path')\n  let r = require.context('./vfx-codes', true, /\\.js$/, 'lazy')\n\n  function importAll(r) {\n    let arr = []\n    r.keys().forEach((key) => {\n      let filename = path.basename(key)\n\n      arr.push({\n        title: filename,\n        loader: () => r(key)\n      })\n    })\n\n    return arr\n  }\n  let codes = importAll(r)\n\n  return codes\n}\n","import React from 'react'\nimport { GraphEditorPageDemo } from './GraphEditorPageDemo/GraphEditorPageDemo'\n\nconst App = () => {\n  return <GraphEditorPageDemo />\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}